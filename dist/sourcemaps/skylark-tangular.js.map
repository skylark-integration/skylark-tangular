{"version":3,"sources":["skylark-tangular.js"],"names":["define","skylark","tangular","attach","helpers","version","cache","debug","toArray","obj","keys","Object","arr","i","length","push","key","value","SKIP","null","undefined","true","false","REG_VARIABLES","REG_KEY","REG_KEYCLEAN","REG_NUM","REG_STRING","REG_CMDFIND","REG_CMDCLEAN","REG_TRIM","Template","this","commands","variables","builder","split","prototype","compile","template","tmp","self","ifcount","loopcount","loops","replace","text","index","cmd","trim","variable","isif","isloop","iscode","pop","substring","parseVariables","name","indexOf","match","toString","slice","helper","safe","make","condition","skip","j","test","output","k","join","Math","random","namea","lastIndexOf","str","$","names","code","Function","REG_ENCODE","$execute","model","a","b","c","d","e","f","g","h","console","warn","call","encode","raw","register","fn","render","repository","main"],"mappings":"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","file":"../skylark-tangular.js","sourcesContent":["define('skylark-tangular/tangular',[\n\t\"skylark-langx/skylark\"\n],function(skylark){\n\tvar tangular = skylark.attach(\"intg.totaljs.tangular\",{}); \n\tvar Thelpers = tangular.helpers = {};\n\ttangular.version = 'v3.0.1';\n\ttangular.cache = {};\n\ttangular.debug = false;\n\n\ttangular.toArray = function(obj) {\n\t\tvar keys = Object.keys(obj);\n\t\tvar arr = [];\n\t\tfor (var i = 0, length = keys.length; i < length; i++)\n\t\t\tarr.push({ key: keys[i], value: obj[keys[i]] });\n\t\treturn arr;\n\t};\n\n\treturn tangular;\n});\n\n\ndefine('skylark-tangular/Template',[\r\n\t\"./tangular\"\r\n],function(tangular){\r\n\r\n\tvar SKIP = { 'null': true, 'undefined': true, 'true': true, 'false': true };\r\n\tvar REG_VARIABLES = /&&|\\|\\|/;\r\n\tvar REG_KEY = /[a-z0-9._]+/gi;\r\n\tvar REG_KEYCLEAN = /^[a-z0-9_$]+/i;\r\n\tvar REG_NUM = /^[0-9]/;\r\n\tvar REG_STRING = /'.*?'|\".?\"/g;\r\n\tvar REG_CMDFIND = /\\{\\{.*?\\}\\}/g;\r\n\tvar REG_CMDCLEAN = /\\{\\{|\\}\\}/g;\r\n\tvar REG_TRIM = /\\n$/g;\r\n\r\n\tfunction Template() {\r\n\t\tthis.commands;\r\n\t\tthis.variables;\r\n\t\tthis.builder;\r\n\t\tthis.split = '\\0';\r\n\t}\r\n\r\n\r\n\tTemplate.prototype.compile = function(template) {\r\n\r\n\t\tvar self = this;\r\n\t\tvar ifcount = 0;\r\n\t\tvar loopcount = 0;\r\n\t\tvar tmp;\r\n\t\tvar loops = [];\r\n\r\n\t\tself.variables = {};\r\n\t\tself.commands = [];\r\n\r\n\t\tself.builder = template.replace(REG_CMDFIND, function(text) {\r\n\r\n\t\t\tvar cmd = text.replace(REG_CMDCLEAN, '').trim();\r\n\t\t\tvar variable = null;\r\n\t\t\tvar helpers = null;\r\n\t\t\tvar index;\r\n\t\t\tvar isif = false;\r\n\t\t\tvar isloop = false;\r\n\t\t\tvar iscode = true;\r\n\r\n\t\t\tif (cmd === 'fi') {\r\n\t\t\t\tifcount--;\r\n\t\t\t\t// end of condition\r\n\t\t\t} else if (cmd === 'end') {\r\n\t\t\t\tloopcount--;\r\n\t\t\t\t// end of loop\r\n\t\t\t\tloops.pop();\r\n\t\t\t} else if (cmd.substring(0, 3) === 'if ') {\r\n\t\t\t\tifcount++;\r\n\t\t\t\t// condition\r\n\t\t\t\tvariable = self.parseVariables(cmd.substring(3), loops);\r\n\t\t\t\tif (variable.length) {\r\n\t\t\t\t\tfor (var i = 0; i < variable.length; i++) {\r\n\t\t\t\t\t\tvar name = variable[i];\r\n\t\t\t\t\t\tif (self.variables[name])\r\n\t\t\t\t\t\t\tself.variables[name]++;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tself.variables[name] = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else\r\n\t\t\t\t\tvariable = null;\r\n\t\t\t\tisif = true;\r\n\t\t\t\tiscode = true;\r\n\t\t\t} else if (cmd.substring(0, 8) === 'foreach ') {\r\n\r\n\t\t\t\tloopcount++;\r\n\t\t\t\t// loop\r\n\r\n\t\t\t\ttmp = cmd.substring(8).split(' ');\r\n\t\t\t\tloops.push(tmp[0].trim());\r\n\r\n\t\t\t\tindex = tmp[2].indexOf('.');\r\n\t\t\t\tif (index !== -1)\r\n\t\t\t\t\ttmp[2] = tmp[2].substring(0, index);\r\n\r\n\t\t\t\tvariable = tmp[2].trim();\r\n\r\n\t\t\t\tif (loops.indexOf(variable) === -1) {\r\n\t\t\t\t\tif (self.variables[variable])\r\n\t\t\t\t\t\tself.variables[variable]++;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tself.variables[variable] = 1;\r\n\t\t\t\t\tvariable = [variable];\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tvariable = null;\r\n\r\n\t\t\t\tisloop = true;\r\n\t\t\t} else if (cmd.substring(0, 8) === 'else if ') {\r\n\t\t\t\t// else if\r\n\t\t\t\tvariable = self.parseVariables(cmd.substring(8), loops);\r\n\t\t\t\tif (variable.length) {\r\n\t\t\t\t\tfor (var i = 0; i < variable.length; i++) {\r\n\t\t\t\t\t\tvar name = variable[i];\r\n\t\t\t\t\t\tif (self.variables[name])\r\n\t\t\t\t\t\t\tself.variables[name]++;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tself.variables[name] = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else\r\n\t\t\t\t\tvariable = null;\r\n\t\t\t\tisif = true;\r\n\t\t\t} else if (cmd !== 'continue' && cmd !== 'break' && cmd !== 'else') {\r\n\r\n\r\n\t\t\t\tvariable = cmd ? cmd.match(REG_KEYCLEAN) : null;\r\n\r\n\t\t\t\tif (variable)\r\n\t\t\t\t\tvariable = variable.toString();\r\n\r\n\t\t\t\tif (variable && SKIP[variable])\r\n\t\t\t\t\tvariable = null;\r\n\r\n\t\t\t\tif (variable && loops.indexOf(variable) === -1) {\r\n\t\t\t\t\tif (self.variables[variable])\r\n\t\t\t\t\t\tself.variables[variable]++;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tself.variables[variable] = 1;\r\n\r\n\t\t\t\t\tvariable = [variable];\r\n\t\t\t\t} else\r\n\t\t\t\t\tvariable = null;\r\n\r\n\t\t\t\tif (cmd.indexOf('|') === -1)\r\n\t\t\t\t\tcmd += ' | encode';\r\n\r\n\t\t\t\thelpers = cmd.split('|');\r\n\t\t\t\tcmd = helpers[0];\r\n\t\t\t\thelpers = helpers.slice(1);\r\n\t\t\t\tif (helpers.length) {\r\n\t\t\t\t\tfor (var i = 0; i < helpers.length; i++) {\r\n\t\t\t\t\t\tvar helper = helpers[i].trim();\r\n\t\t\t\t\t\tindex = helper.indexOf('(');\r\n\t\t\t\t\t\tif (index === -1) {\r\n\t\t\t\t\t\t\thelper = 'Thelpers.$execute(model,\\'' + helper + '\\',\\7)';\r\n\t\t\t\t\t\t} else\r\n\t\t\t\t\t\t\thelper = 'Thelpers.$execute(model,\\'' + helper.substring(0, index) + '\\',\\7,' + helper.substring(index + 1);\r\n\t\t\t\t\t\thelpers[i] = helper;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else\r\n\t\t\t\t\thelpers = null;\r\n\r\n\t\t\t\tcmd = self.safe(cmd.trim() || 'model');\r\n\t\t\t\tiscode = false;\r\n\t\t\t}\r\n\r\n\t\t\tself.commands.push({ index: self.commands.length, cmd: cmd, ifcount: ifcount, loopcount: loopcount, variable: variable, helpers: helpers, isloop: isloop, isif: isif, iscode: iscode });\r\n\t\t\treturn self.split;\r\n\r\n\t\t}).split(self.split);\r\n\r\n\r\n\t\tfor (var i = 0, length = self.builder.length; i < length; i++)\r\n\t\t\tself.builder[i] = self.builder[i].replace(REG_TRIM, '');\r\n\r\n\t\treturn self.make();\r\n\t};\r\n\r\n\tTemplate.prototype.parseVariables = function(condition, skip) {\r\n\r\n\t\tvar variables = [];\r\n\t\tvar arr = condition.split(REG_VARIABLES);\r\n\t\tfor (var i = 0, length = arr.length; i < length; i++) {\r\n\r\n\t\t\tvar key = arr[i].replace(REG_STRING, '');\r\n\t\t\tvar keys = key.match(REG_KEY);\r\n\r\n\t\t\tfor (var j = 0; j < keys.length; j++) {\r\n\t\t\t\tkey = keys[j];\r\n\t\t\t\tkey = key.split('.')[0];\r\n\t\t\t\tif (!key || (REG_NUM).test(key) || SKIP[key])\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tvariables.indexOf(key) === -1 && skip.indexOf(key) === -1 && variables.push(key);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn variables;\r\n\t};\r\n\r\n\tTemplate.prototype.safe = function(cmd) {\r\n\r\n\t\tvar arr = cmd.split('.');\r\n\t\tvar output = [];\r\n\r\n\t\tfor (var i = 1; i < arr.length; i++) {\r\n\t\t\tvar k = arr.slice(0, i).join('.');\r\n\t\t\toutput.push(k + '==null?\\'\\':');\r\n\t\t}\r\n\t\treturn output.join('') + arr.join('.');\r\n\t};\r\n\r\n\tTemplate.prototype.make = function() {\r\n\r\n\t\tvar self = this;\r\n\t\tvar builder = ['var $output=$text[0];var $tmp;var $index=0;'];\r\n\r\n\t\tfor (var i = 0, length = self.commands.length; i < length; i++) {\r\n\r\n\t\t\tvar cmd = self.commands[i];\r\n\t\t\tvar tmp;\r\n\r\n\t\t\ti && builder.push('$output+=$text[' + i + '];');\r\n\r\n\t\t\tif (cmd.iscode) {\r\n\r\n\t\t\t\tif (cmd.isloop) {\r\n\r\n\t\t\t\t\tvar name = '$i' + Math.random().toString(16).substring(3, 6);\r\n\t\t\t\t\tvar namea = name + 'a';\r\n\t\t\t\t\ttmp = cmd.cmd.substring(cmd.cmd.lastIndexOf(' in ') + 4).trim();\r\n\t\t\t\t\ttmp = namea + '=' + self.safe(tmp) + ';if(!(' + namea + ' instanceof Array)){if(' + namea + '&&typeof(' + namea + ')===\\'object\\')' + namea + '=Tangular.toArray(' + namea + ')}if(' + namea + ' instanceof Array&&' + namea + '.length){for(var ' + name + '=0,' + name + 'l=' + namea + '.length;' + name + '<' + name + 'l;' + name + '++){$index=' + name + ';var ' + cmd.cmd.split(' ')[1] + '=' + namea + '[' + name + '];';\r\n\t\t\t\t\tbuilder.push(tmp);\r\n\r\n\t\t\t\t} else if (cmd.isif) {\r\n\t\t\t\t\tif (cmd.cmd.substring(0, 8) === 'else if ')\r\n\t\t\t\t\t\tbuilder.push('}' + cmd.cmd.substring(0, 8).trim() + '(' + cmd.cmd.substring(8).trim() + '){');\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tbuilder.push(cmd.cmd.substring(0, 3).trim() + '(' + cmd.cmd.substring(3).trim() + '){');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tswitch (cmd.cmd) {\r\n\t\t\t\t\t\tcase 'else':\r\n\t\t\t\t\t\t\tbuilder.push('}else{');\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'end':\r\n\t\t\t\t\t\t\tbuilder.push('}}');\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'fi':\r\n\t\t\t\t\t\t\tbuilder.push('}');\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'break':\r\n\t\t\t\t\t\t\tbuilder.push('break;');\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'continue':\r\n\t\t\t\t\t\t\tbuilder.push('continue;');\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\t\t\t\tif (cmd.helpers) {\r\n\t\t\t\t\tvar str = '';\r\n\t\t\t\t\tfor (var j = 0; j < cmd.helpers.length; j++) {\r\n\t\t\t\t\t\tvar helper = cmd.helpers[j];\r\n\t\t\t\t\t\tif (j === 0)\r\n\t\t\t\t\t\t\tstr = helper.replace('\\7', cmd.cmd.trim()).trim();\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tstr = helper.replace('\\7', str.trim());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuilder.push('$tmp=' + str + ';if($tmp!=null)$output+=$tmp;');\r\n\t\t\t\t} else\r\n\t\t\t\t\tbuilder.push('if(' + cmd.cmd + '!=null)$output+=' + cmd.cmd + ';');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tbuilder.push((length ? ('$output+=$text[' + length + '];') : '') + 'return $output;');\r\n\r\n\t\tdelete self.variables.$;\r\n\t\tvar variables = Object.keys(self.variables);\r\n\t\tvar names = ['$ || {}', 'model'];\r\n\r\n\t\tfor (var i = 0; i < variables.length; i++)\r\n\t\t\tnames.push('model.' + variables[i]);\r\n\r\n\t\tvar code = 'var tangular=function($,model' + (variables.length ? (',' + variables.join(',')) : '') + '){' + builder.join('') + '};return function(model,$){return tangular(' + names.join(',') + ');}';\r\n\t\treturn (new Function('$text', code))(self.builder);\r\n\t};\r\n\r\n\treturn Template\t;\r\n\r\n});\ndefine('skylark-tangular/compile',[\r\n\t\"./tangular\",\r\n\t\"./Template\"\r\n],function(tangular,Template){\r\n\r\n\treturn tangular.compile = function(template) {\r\n\t\treturn new Template().compile(template);\r\n\t};\r\n\r\n});\ndefine('skylark-tangular/helpers',[\r\n\t\"./tangular\"\r\n],function(tangular){\r\n\tvar helpers = {};\r\n\r\n\tvar REG_ENCODE = /[<>&\"]/g;\r\n\r\n\r\n\thelpers.$execute = function(model, name, a, b, c, d, e, f, g, h) {\r\n\r\n\t\tif (helpers[name] == null) {\r\n\t\t\tconsole && console.warn('Tangular: missing helper', '\"' + name + '\"');\r\n\t\t\treturn a;\r\n\t\t}\r\n\t\treturn helpers[name].call(model, a, b, c, d, e, f, g, h);\r\n\t};\r\n\r\n\thelpers.encode = function(value) {\r\n\t\treturn value == null ? '' : value.toString().replace(REG_ENCODE, function(c) {\r\n\t\t\tswitch (c) {\r\n\t\t\t\tcase '&': return '&amp;';\r\n\t\t\t\tcase '<': return '&lt;';\r\n\t\t\t\tcase '>': return '&gt;';\r\n\t\t\t\tcase '\"': return '&quot;';\r\n\t\t\t}\r\n\t\t\treturn c;\r\n\t\t});\r\n\t};\r\n\r\n\thelpers.raw = function(value) {\r\n\t\treturn value;\r\n\t};\r\n\r\n\treturn tangular.helpers = helpers;\r\n});\ndefine('skylark-tangular/register',[\r\n\t\"./tangular\",\r\n\t\"./helpers\"\r\n],function(tangular,helpers){\r\n\r\n\treturn tangular.register = function(name, fn) {\r\n\t\thelpers[name] = fn;\r\n\t\treturn this;\r\n\t};\r\n});\ndefine('skylark-tangular/render',[\r\n\t\"./tangular\",\r\n\t\"./Template\"\r\n],function(tangular,Template){\r\n\r\n\treturn tangular.render = function(template, model, repository) {\r\n\t\tif (model == null)\r\n\t\t\tmodel = {};\r\n\t\treturn new Template().compile(template)(model, repository);\r\n\t};\r\n\r\n});\ndefine('skylark-tangular/main',[\r\n\t\"./tangular\",\r\n\t\"./compile\",\r\n\t\"./helpers\",\r\n\t\"./register\",\r\n\t\"./render\",\r\n\t\"./Template\"\r\n],function(tangular){\r\n\r\n\treturn tangular;\r\n});\ndefine('skylark-tangular', ['skylark-tangular/main'], function (main) { return main; });\n\n"]}