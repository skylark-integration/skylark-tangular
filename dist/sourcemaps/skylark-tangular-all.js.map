{"version":3,"sources":["skylark-tangular-all.js"],"names":["define","obj1","path","obj2","split","length","ns","i","name","_attach","skylark","attach","obj","main","tangular","helpers","version","cache","debug","toArray","keys","Object","arr","push","key","value","SKIP","null","undefined","true","false","REG_VARIABLES","REG_KEY","REG_KEYCLEAN","REG_NUM","REG_STRING","REG_CMDFIND","REG_CMDCLEAN","REG_TRIM","Template","this","commands","variables","builder","prototype","compile","template","tmp","self","ifcount","loopcount","loops","replace","text","index","cmd","trim","variable","isif","isloop","iscode","pop","substring","parseVariables","indexOf","match","toString","slice","helper","safe","make","condition","skip","j","test","output","k","join","Math","random","namea","lastIndexOf","str","$","names","code","Function","REG_ENCODE","$execute","model","a","b","c","d","e","f","g","h","console","warn","call","encode","raw","register","fn","render","repository","W","window","Ta","Tangular","Thelpers"],"mappings":"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","file":"../skylark-tangular-all.js","sourcesContent":["define('skylark-langx-ns/_attach',[],function(){\r\n    return  function attach(obj1,path,obj2) {\r\n        if (typeof path == \"string\") {\r\n            path = path.split(\".\");//[path]\r\n        };\r\n        var length = path.length,\r\n            ns=obj1,\r\n            i=0,\r\n            name = path[i++];\r\n\r\n        while (i < length) {\r\n            ns = ns[name] = ns[name] || {};\r\n            name = path[i++];\r\n        }\r\n\r\n        return ns[name] = obj2;\r\n    }\r\n});\ndefine('skylark-langx-ns/ns',[\r\n    \"./_attach\"\r\n], function(_attach) {\r\n    var skylark = {\r\n    \tattach : function(path,obj) {\r\n    \t\treturn _attach(skylark,path,obj);\r\n    \t}\r\n    };\r\n    return skylark;\r\n});\r\n\ndefine('skylark-langx-ns/main',[\r\n\t\"./ns\"\r\n],function(skylark){\r\n\treturn skylark;\r\n});\ndefine('skylark-langx-ns', ['skylark-langx-ns/main'], function (main) { return main; });\n\ndefine('skylark-langx/skylark',[\r\n    \"skylark-langx-ns\"\r\n], function(ns) {\r\n\treturn ns;\r\n});\r\n\ndefine('skylark-tangular/tangular',[\n\t\"skylark-langx/skylark\"\n],function(skylark){\n\tvar tangular = skylark.attach(\"intg.totaljs.tangular\",{}); \n\tvar Thelpers = tangular.helpers = {};\n\ttangular.version = 'v3.0.1';\n\ttangular.cache = {};\n\ttangular.debug = false;\n\n\ttangular.toArray = function(obj) {\n\t\tvar keys = Object.keys(obj);\n\t\tvar arr = [];\n\t\tfor (var i = 0, length = keys.length; i < length; i++)\n\t\t\tarr.push({ key: keys[i], value: obj[keys[i]] });\n\t\treturn arr;\n\t};\n\n\treturn tangular;\n});\n\n\ndefine('skylark-tangular/Template',[\r\n\t\"./tangular\"\r\n],function(tangular){\r\n\r\n\tvar SKIP = { 'null': true, 'undefined': true, 'true': true, 'false': true };\r\n\tvar REG_VARIABLES = /&&|\\|\\|/;\r\n\tvar REG_KEY = /[a-z0-9._]+/gi;\r\n\tvar REG_KEYCLEAN = /^[a-z0-9_$]+/i;\r\n\tvar REG_NUM = /^[0-9]/;\r\n\tvar REG_STRING = /'.*?'|\".?\"/g;\r\n\tvar REG_CMDFIND = /\\{\\{.*?\\}\\}/g;\r\n\tvar REG_CMDCLEAN = /\\{\\{|\\}\\}/g;\r\n\tvar REG_TRIM = /\\n$/g;\r\n\r\n\tfunction Template() {\r\n\t\tthis.commands;\r\n\t\tthis.variables;\r\n\t\tthis.builder;\r\n\t\tthis.split = '\\0';\r\n\t}\r\n\r\n\r\n\tTemplate.prototype.compile = function(template) {\r\n\r\n\t\tvar self = this;\r\n\t\tvar ifcount = 0;\r\n\t\tvar loopcount = 0;\r\n\t\tvar tmp;\r\n\t\tvar loops = [];\r\n\r\n\t\tself.variables = {};\r\n\t\tself.commands = [];\r\n\r\n\t\tself.builder = template.replace(REG_CMDFIND, function(text) {\r\n\r\n\t\t\tvar cmd = text.replace(REG_CMDCLEAN, '').trim();\r\n\t\t\tvar variable = null;\r\n\t\t\tvar helpers = null;\r\n\t\t\tvar index;\r\n\t\t\tvar isif = false;\r\n\t\t\tvar isloop = false;\r\n\t\t\tvar iscode = true;\r\n\r\n\t\t\tif (cmd === 'fi') {\r\n\t\t\t\tifcount--;\r\n\t\t\t\t// end of condition\r\n\t\t\t} else if (cmd === 'end') {\r\n\t\t\t\tloopcount--;\r\n\t\t\t\t// end of loop\r\n\t\t\t\tloops.pop();\r\n\t\t\t} else if (cmd.substring(0, 3) === 'if ') {\r\n\t\t\t\tifcount++;\r\n\t\t\t\t// condition\r\n\t\t\t\tvariable = self.parseVariables(cmd.substring(3), loops);\r\n\t\t\t\tif (variable.length) {\r\n\t\t\t\t\tfor (var i = 0; i < variable.length; i++) {\r\n\t\t\t\t\t\tvar name = variable[i];\r\n\t\t\t\t\t\tif (self.variables[name])\r\n\t\t\t\t\t\t\tself.variables[name]++;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tself.variables[name] = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else\r\n\t\t\t\t\tvariable = null;\r\n\t\t\t\tisif = true;\r\n\t\t\t\tiscode = true;\r\n\t\t\t} else if (cmd.substring(0, 8) === 'foreach ') {\r\n\r\n\t\t\t\tloopcount++;\r\n\t\t\t\t// loop\r\n\r\n\t\t\t\ttmp = cmd.substring(8).split(' ');\r\n\t\t\t\tloops.push(tmp[0].trim());\r\n\r\n\t\t\t\tindex = tmp[2].indexOf('.');\r\n\t\t\t\tif (index !== -1)\r\n\t\t\t\t\ttmp[2] = tmp[2].substring(0, index);\r\n\r\n\t\t\t\tvariable = tmp[2].trim();\r\n\r\n\t\t\t\tif (loops.indexOf(variable) === -1) {\r\n\t\t\t\t\tif (self.variables[variable])\r\n\t\t\t\t\t\tself.variables[variable]++;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tself.variables[variable] = 1;\r\n\t\t\t\t\tvariable = [variable];\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tvariable = null;\r\n\r\n\t\t\t\tisloop = true;\r\n\t\t\t} else if (cmd.substring(0, 8) === 'else if ') {\r\n\t\t\t\t// else if\r\n\t\t\t\tvariable = self.parseVariables(cmd.substring(8), loops);\r\n\t\t\t\tif (variable.length) {\r\n\t\t\t\t\tfor (var i = 0; i < variable.length; i++) {\r\n\t\t\t\t\t\tvar name = variable[i];\r\n\t\t\t\t\t\tif (self.variables[name])\r\n\t\t\t\t\t\t\tself.variables[name]++;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tself.variables[name] = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else\r\n\t\t\t\t\tvariable = null;\r\n\t\t\t\tisif = true;\r\n\t\t\t} else if (cmd !== 'continue' && cmd !== 'break' && cmd !== 'else') {\r\n\r\n\r\n\t\t\t\tvariable = cmd ? cmd.match(REG_KEYCLEAN) : null;\r\n\r\n\t\t\t\tif (variable)\r\n\t\t\t\t\tvariable = variable.toString();\r\n\r\n\t\t\t\tif (variable && SKIP[variable])\r\n\t\t\t\t\tvariable = null;\r\n\r\n\t\t\t\tif (variable && loops.indexOf(variable) === -1) {\r\n\t\t\t\t\tif (self.variables[variable])\r\n\t\t\t\t\t\tself.variables[variable]++;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tself.variables[variable] = 1;\r\n\r\n\t\t\t\t\tvariable = [variable];\r\n\t\t\t\t} else\r\n\t\t\t\t\tvariable = null;\r\n\r\n\t\t\t\tif (cmd.indexOf('|') === -1)\r\n\t\t\t\t\tcmd += ' | encode';\r\n\r\n\t\t\t\thelpers = cmd.split('|');\r\n\t\t\t\tcmd = helpers[0];\r\n\t\t\t\thelpers = helpers.slice(1);\r\n\t\t\t\tif (helpers.length) {\r\n\t\t\t\t\tfor (var i = 0; i < helpers.length; i++) {\r\n\t\t\t\t\t\tvar helper = helpers[i].trim();\r\n\t\t\t\t\t\tindex = helper.indexOf('(');\r\n\t\t\t\t\t\tif (index === -1) {\r\n\t\t\t\t\t\t\thelper = 'Thelpers.$execute(model,\\'' + helper + '\\',\\7)';\r\n\t\t\t\t\t\t} else\r\n\t\t\t\t\t\t\thelper = 'Thelpers.$execute(model,\\'' + helper.substring(0, index) + '\\',\\7,' + helper.substring(index + 1);\r\n\t\t\t\t\t\thelpers[i] = helper;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else\r\n\t\t\t\t\thelpers = null;\r\n\r\n\t\t\t\tcmd = self.safe(cmd.trim() || 'model');\r\n\t\t\t\tiscode = false;\r\n\t\t\t}\r\n\r\n\t\t\tself.commands.push({ index: self.commands.length, cmd: cmd, ifcount: ifcount, loopcount: loopcount, variable: variable, helpers: helpers, isloop: isloop, isif: isif, iscode: iscode });\r\n\t\t\treturn self.split;\r\n\r\n\t\t}).split(self.split);\r\n\r\n\r\n\t\tfor (var i = 0, length = self.builder.length; i < length; i++)\r\n\t\t\tself.builder[i] = self.builder[i].replace(REG_TRIM, '');\r\n\r\n\t\treturn self.make();\r\n\t};\r\n\r\n\tTemplate.prototype.parseVariables = function(condition, skip) {\r\n\r\n\t\tvar variables = [];\r\n\t\tvar arr = condition.split(REG_VARIABLES);\r\n\t\tfor (var i = 0, length = arr.length; i < length; i++) {\r\n\r\n\t\t\tvar key = arr[i].replace(REG_STRING, '');\r\n\t\t\tvar keys = key.match(REG_KEY);\r\n\r\n\t\t\tfor (var j = 0; j < keys.length; j++) {\r\n\t\t\t\tkey = keys[j];\r\n\t\t\t\tkey = key.split('.')[0];\r\n\t\t\t\tif (!key || (REG_NUM).test(key) || SKIP[key])\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tvariables.indexOf(key) === -1 && skip.indexOf(key) === -1 && variables.push(key);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn variables;\r\n\t};\r\n\r\n\tTemplate.prototype.safe = function(cmd) {\r\n\r\n\t\tvar arr = cmd.split('.');\r\n\t\tvar output = [];\r\n\r\n\t\tfor (var i = 1; i < arr.length; i++) {\r\n\t\t\tvar k = arr.slice(0, i).join('.');\r\n\t\t\toutput.push(k + '==null?\\'\\':');\r\n\t\t}\r\n\t\treturn output.join('') + arr.join('.');\r\n\t};\r\n\r\n\tTemplate.prototype.make = function() {\r\n\r\n\t\tvar self = this;\r\n\t\tvar builder = ['var $output=$text[0];var $tmp;var $index=0;'];\r\n\r\n\t\tfor (var i = 0, length = self.commands.length; i < length; i++) {\r\n\r\n\t\t\tvar cmd = self.commands[i];\r\n\t\t\tvar tmp;\r\n\r\n\t\t\ti && builder.push('$output+=$text[' + i + '];');\r\n\r\n\t\t\tif (cmd.iscode) {\r\n\r\n\t\t\t\tif (cmd.isloop) {\r\n\r\n\t\t\t\t\tvar name = '$i' + Math.random().toString(16).substring(3, 6);\r\n\t\t\t\t\tvar namea = name + 'a';\r\n\t\t\t\t\ttmp = cmd.cmd.substring(cmd.cmd.lastIndexOf(' in ') + 4).trim();\r\n\t\t\t\t\ttmp = namea + '=' + self.safe(tmp) + ';if(!(' + namea + ' instanceof Array)){if(' + namea + '&&typeof(' + namea + ')===\\'object\\')' + namea + '=Tangular.toArray(' + namea + ')}if(' + namea + ' instanceof Array&&' + namea + '.length){for(var ' + name + '=0,' + name + 'l=' + namea + '.length;' + name + '<' + name + 'l;' + name + '++){$index=' + name + ';var ' + cmd.cmd.split(' ')[1] + '=' + namea + '[' + name + '];';\r\n\t\t\t\t\tbuilder.push(tmp);\r\n\r\n\t\t\t\t} else if (cmd.isif) {\r\n\t\t\t\t\tif (cmd.cmd.substring(0, 8) === 'else if ')\r\n\t\t\t\t\t\tbuilder.push('}' + cmd.cmd.substring(0, 8).trim() + '(' + cmd.cmd.substring(8).trim() + '){');\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tbuilder.push(cmd.cmd.substring(0, 3).trim() + '(' + cmd.cmd.substring(3).trim() + '){');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tswitch (cmd.cmd) {\r\n\t\t\t\t\t\tcase 'else':\r\n\t\t\t\t\t\t\tbuilder.push('}else{');\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'end':\r\n\t\t\t\t\t\t\tbuilder.push('}}');\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'fi':\r\n\t\t\t\t\t\t\tbuilder.push('}');\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'break':\r\n\t\t\t\t\t\t\tbuilder.push('break;');\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'continue':\r\n\t\t\t\t\t\t\tbuilder.push('continue;');\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\t\t\t\tif (cmd.helpers) {\r\n\t\t\t\t\tvar str = '';\r\n\t\t\t\t\tfor (var j = 0; j < cmd.helpers.length; j++) {\r\n\t\t\t\t\t\tvar helper = cmd.helpers[j];\r\n\t\t\t\t\t\tif (j === 0)\r\n\t\t\t\t\t\t\tstr = helper.replace('\\7', cmd.cmd.trim()).trim();\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tstr = helper.replace('\\7', str.trim());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuilder.push('$tmp=' + str + ';if($tmp!=null)$output+=$tmp;');\r\n\t\t\t\t} else\r\n\t\t\t\t\tbuilder.push('if(' + cmd.cmd + '!=null)$output+=' + cmd.cmd + ';');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tbuilder.push((length ? ('$output+=$text[' + length + '];') : '') + 'return $output;');\r\n\r\n\t\tdelete self.variables.$;\r\n\t\tvar variables = Object.keys(self.variables);\r\n\t\tvar names = ['$ || {}', 'model'];\r\n\r\n\t\tfor (var i = 0; i < variables.length; i++)\r\n\t\t\tnames.push('model.' + variables[i]);\r\n\r\n\t\tvar code = 'var tangular=function($,model' + (variables.length ? (',' + variables.join(',')) : '') + '){' + builder.join('') + '};return function(model,$){return tangular(' + names.join(',') + ');}';\r\n\t\treturn (new Function('$text', code))(self.builder);\r\n\t};\r\n\r\n\treturn Template\t;\r\n\r\n});\ndefine('skylark-tangular/compile',[\r\n\t\"./tangular\",\r\n\t\"./Template\"\r\n],function(tangular,Template){\r\n\r\n\treturn tangular.compile = function(template) {\r\n\t\treturn new Template().compile(template);\r\n\t};\r\n\r\n});\ndefine('skylark-tangular/helpers',[\r\n\t\"./tangular\"\r\n],function(tangular){\r\n\tvar helpers = {};\r\n\r\n\tvar REG_ENCODE = /[<>&\"]/g;\r\n\r\n\r\n\thelpers.$execute = function(model, name, a, b, c, d, e, f, g, h) {\r\n\r\n\t\tif (helpers[name] == null) {\r\n\t\t\tconsole && console.warn('Tangular: missing helper', '\"' + name + '\"');\r\n\t\t\treturn a;\r\n\t\t}\r\n\t\treturn helpers[name].call(model, a, b, c, d, e, f, g, h);\r\n\t};\r\n\r\n\thelpers.encode = function(value) {\r\n\t\treturn value == null ? '' : value.toString().replace(REG_ENCODE, function(c) {\r\n\t\t\tswitch (c) {\r\n\t\t\t\tcase '&': return '&amp;';\r\n\t\t\t\tcase '<': return '&lt;';\r\n\t\t\t\tcase '>': return '&gt;';\r\n\t\t\t\tcase '\"': return '&quot;';\r\n\t\t\t}\r\n\t\t\treturn c;\r\n\t\t});\r\n\t};\r\n\r\n\thelpers.raw = function(value) {\r\n\t\treturn value;\r\n\t};\r\n\r\n\treturn tangular.helpers = helpers;\r\n});\ndefine('skylark-tangular/register',[\r\n\t\"./tangular\",\r\n\t\"./helpers\"\r\n],function(tangular,helpers){\r\n\r\n\treturn tangular.register = function(name, fn) {\r\n\t\thelpers[name] = fn;\r\n\t\treturn this;\r\n\t};\r\n});\ndefine('skylark-tangular/render',[\r\n\t\"./tangular\",\r\n\t\"./Template\"\r\n],function(tangular,Template){\r\n\r\n\treturn tangular.render = function(template, model, repository) {\r\n\t\tif (model == null)\r\n\t\t\tmodel = {};\r\n\t\treturn new Template().compile(template)(model, repository);\r\n\t};\r\n\r\n});\ndefine('skylark-tangular/globals',[\r\n\t\"./tangular\",\r\n\t\"./helpers\"\r\n],function(tangular){\r\n\tvar W = window;\r\n\tW.Ta = W.Tangular = tangular;\r\n\tW.Thelpers = tangular.helpers;\r\n\treturn W;\r\n});\ndefine('skylark-tangular/main',[\r\n\t\"./tangular\",\r\n\t\"./compile\",\r\n\t\"./helpers\",\r\n\t\"./register\",\r\n\t\"./render\",\r\n\t\"./Template\",\r\n\t\"./globals\"\r\n],function(tangular){\r\n\r\n\treturn tangular;\r\n});\ndefine('skylark-tangular', ['skylark-tangular/main'], function (main) { return main; });\n\n"]}